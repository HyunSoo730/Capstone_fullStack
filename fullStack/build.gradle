
plugins {
		id 'java'
		id 'org.springframework.boot' version '3.0.4'
		id 'io.spring.dependency-management' version '1.1.0'
		//QueryDSL 추가
		//id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	}

	group = 'capstone'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '17'

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-devtools'

		compileOnly 'org.projectlombok:lombok'
	//	runtimeOnly 'com.h2database:h2'
		//mysql 연결
		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'mysql:mysql-connector-java:8.0.32'  //mysql로 연결 시작.
		//어째서 sql 버전을 써줘야지만 제대로 연동 되는지 잘 모르겠음. 이거 꼭 기록에 남겨야함.
		implementation 'com.google.code.gson:gson:2.9.0'  //GSON 라이브러리 추가. --> JSON 데이터를 자바 객체로 변환해줌

//		// 스프링 시큐리티와 Jwt 토큰을 통해 로그인을 하기 위해
//		implementation 'io.jsonwebtoken:jjwt:0.9.1'
//		implementation 'org.springframework.boot:spring-boot-starter-security'
//		implementation 'com.auth0:java-jwt:4.4.0'

		// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt   JWT토큰을 위한 jjwt 라이브러리
//		implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
		implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
		runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
		runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'

		//web client
		implementation 'org.springframework.boot:spring-boot-starter-webflux'

		//롬복
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'

		//테스트에서 lombok 사용하기 위해
		testCompileOnly 'org.projectlombok:lombok'
		testAnnotationProcessor 'org.projectlombok:lombok'

		//querydsl
		implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
		annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
		annotationProcessor "jakarta.annotation:jakarta.annotation-api"
		annotationProcessor "jakarta.persistence:jakarta.persistence-api"

		implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'
	}

	tasks.named('test') {
		useJUnitPlatform()
	}


	//querydsl 추가 시작
	def querydslDir = "$buildDir/generated/querydsl"

	sourceSets {
		main.java.srcDirs += [ querydslDir ]
	}

	tasks.withType(JavaCompile) {
		options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
	}

	clean.doLast {
		file(querydslDir).deleteDir()
	}
	//querydsl 추가 끝